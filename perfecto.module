<?php

/**
 * @file
 * Float composition over weg page.
 */


/**
 * Don't use l() here because it adds active class. Drupal thinks it's
 * another message thus showing 2 visually identical messages.
 *
 * It's a feature that it's shown always when there are no compositions
 * uploaded - Perfecto should not be enabled when you don't use it.
 */
define('PERFECTO_WARNING_NO_COMPOSITIONS',
        t('You have not uploaded any web compositions to Perfecto. !click_here to add some or !disable_this_module.',
          array(
            '!click_here' => '<a href=' . url('admin/settings/perfecto') . '>' . t('Click here') . '</a>',
            '!disable_this_module' => '<a href=' . url('admin/settings/perfecto/disable_module') . '>' . t('disable this module') . '</a>',
          )
        )
);


/**
 * Implements hook_menu().
 */
function perfecto_menu() {
  // Upload and listing page.
  $items['admin/settings/perfecto'] = array(
    'title' => 'Perfecto',
    'description' => 'View, upload and delete web compositions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('perfecto_admin_page_callback'),
    'access callback' => 'perfecto_user_is_logged_in_custom',
  );
  $items['admin/settings/perfecto/disable_module'] = array(
    'title' => 'Disable module',
    'description' => '',
    'page callback' => 'perfecto_disable_module_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/perfecto/delete'] = array(
    'title' => 'Delete composotion',
    'description' => 'Hook for deleting composition.',
    'page callback' => 'perfecto_unmanaged_delete_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/perfecto/delete/all/confirmation'] = array(
    'title' => 'Delete all compositions confirmation',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('perfecto_delete_all_confirmation_page_callback'),
    'access callback' => 'user_is_logged_in_custom',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/perfecto/composition_control_panel'] = array(
    'title' => 'Overplay panel',
    'description' => '',
    'page callback' => 'perfecto_composition_panel_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_init().
 */
function perfecto_init() {
  global $base_path;

  drupal_add_js('misc/jquery.cookie.js');
  drupal_add_js('misc/ui/jquery.ui.core.min.js');
  drupal_add_js('misc/ui/jquery.ui.widget.min.js');
  drupal_add_js('misc/ui/jquery.ui.mouse.min.js');
  drupal_add_js('misc/ui/jquery.ui.draggable.min.js');
  drupal_add_js('misc/ui/jquery.ui.slider.min.js');

  $module_path = drupal_get_path('module', 'perfecto');
  drupal_add_css($module_path . '/images/perfecto.css');
  drupal_add_js($module_path . '/perfecto.js');

  drupal_add_js(array('perfecto' => array('path' => $base_path . $module_path)), 'setting');

  if (variable_get('perfecto_first_upload_ever')) {
    drupal_add_js(array('perfecto' => array('firstUploadEver' => TRUE)), 'setting');
    variable_set('perfecto_first_upload_ever', FALSE);
  }
  else {
    drupal_add_js(array('perfecto' => array('firstUploadEver' => FALSE)), 'setting');
  }

  $directory = 'public://mod_perfecto';
  $files = file_scan_directory($directory, '/.*/');

  // Add link to delete all files.
  if (count($files) === 0) {
    drupal_set_message(PERFECTO_WARNING_NO_COMPOSITIONS, 'warning', FALSE);
  }
}


/**
 * Implements hook_help().
 */
function perfecto_help($path, $arg) {
  switch ($path) {
    case 'admin/help#perfecto':
      return nl2br(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}


/**
 * Check if user is logged in or not and if not then redirect to login page.
 */
function perfecto_user_is_logged_in_custom() {
  global $user;
  // This user is already logged in.
  if (!$user->uid) {
    drupal_set_message(t('Access denied. Please log in!'));
    drupal_goto('user/login', array('query' => drupal_get_destination()));
    return FALSE;
  }
  else {
    return TRUE;
  }
}


/**
 * Implements hook_page_build().
 */
function perfecto_composition_panel_page_callback() {
  echo theme('perfecto_composition', array('compositions' => perfecto_get_compositions()));
}


/**
 * Implements hook_theme().
 */
function perfecto_theme() {
  return array(
    'perfecto_composition' => array(
      'template' => 'perfecto',
    ),
  );
}


/**
 * Returns composition files as array for our perfecto_theme().
 */
function perfecto_get_compositions() {
  $output = array();
  $directory = 'public://mod_perfecto';
  $files = file_scan_directory($directory, '/.*/');

  foreach ($files as $file) {
    $output[] = $file;
  }

  sort($output);

  return $output;
}


/**
 * Menu callback; Returns form with image upload.
 */
function perfecto_admin_page_callback($form, &$form_state) {
  // Composition file.
  $form['unmanaged_file'] = array(
    '#title' => t('Image'),
    '#type' => 'file',
    '#description' => t('Allowed files: jpg, jpeg and png.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );

  $form['#suffix'] = perfecto_display_unmanaged_files_page();

  return $form;
}


/**
 * Form validation before submiting new composition.
 *
 * Check if file has correct extension and exists.
 */
function perfecto_admin_page_callback_validate($form, &$form_state) {
  $validators = array(
    'file_validate_extensions' => array('jpg jpeg png'),
  );

  $file = file_save_upload('unmanaged_file', $validators, FALSE, FILE_EXISTS_REPLACE);

  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['unmanaged_file'] = $file;
    }
    else {
      form_set_error('unmanaged_file', t('The file could not be uploaded.'));
    }
  }
}


/**
 * Submit new composition.
 */
function perfecto_admin_page_callback_submit($form, &$form_state) {
  // Check if a file was uploaded.
  if ($file = $form_state['values']['unmanaged_file']) {

    // Create the directory if it doesn't exist.
    $directory = 'public://mod_perfecto';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    // Copy the file over.
    $filename = file_unmanaged_copy($file->uri, $directory, FILE_EXISTS_REPLACE);

    // Clear messages set by drupal_set_message().
    drupal_get_messages();

    $first_upload_ever = variable_get('perfecto_first_upload_ever', TRUE);

    if ($first_upload_ever) {
      drupal_set_message(t("Your first composition has been uploaded!"));

      drupal_set_message(t("There's a red line blinking (temporary) in the top right corner of the viewport. This area is for opening Perfecto control panel where you can toggle and move your composition. This line will be made invisible after you hover your mouse on it but it's still going to be there until Perfecto is enabled."), 'warning');

      drupal_set_message(t("To drag the composition, hold down ctrl + left mouse button."), 'warning');

      drupal_set_message(t("You can also move composition by holding down ctrl + pressing arrow keys on your keyboard. If you hold down ctrl + shift, composition will move by 10px."), 'warning');

      // Add this variable to js from hook_init and then set to FALSE.
      variable_set('perfecto_first_upload_ever', TRUE);
    }
    else {
      drupal_set_message(t('Your composition has been uploaded!'));
    }
  }
}


/**
 * Displays thumbnails and delete links of compositions.
 */
function perfecto_display_unmanaged_files_page() {
  $output = '<div style="padding-top: 20px">';
  $directory = 'public://mod_perfecto';
  $files = file_scan_directory($directory, '/.*/');

  // Add link to delete all files.
  if (count($files)) {
    $output .= '<p>' . l(t('Delete all compositions'), 'admin/settings/perfecto/delete/all/confirmation', array('query' => array('destination' => current_path()))) . '</p>';
  }

  // Loop through each file and display as thumbnail with 'view original' and
  // 'delete' links.
  foreach ($files as $file) {
    $output .= '
      <div style="float:left;margin:10px;">
        ' . theme('image_style', array('style_name' => 'thumbnail', 'path' => $file->uri)) . '
        <div>' . $file->filename . '</div>
        <div>' . l(t('View full size composition'), file_create_url($file->uri)) . '</div>
        <div>' . l(t('Delete'), 'admin/settings/perfecto/delete', array('query' => array('destination' => current_path(), 'file' => $file->uri))) . '</div>
      </div>';
  }

  $output .= '</div>';

  return $output;
}


/**
 * Menu callback; Ask confirmation when deleting all compositions.
 */
function perfecto_delete_all_confirmation_page_callback() {
  return confirm_form(array(),
    t('Are you sure you want to delete all compositions?'),
    isset($_GET['destination']) ? $_GET['destination'] : 'admin/settings/perfecto',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}


/**
 * After confirmation delete all compositions.
 */
function perfecto_delete_all_confirmation_page_callback_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    file_unmanaged_delete_recursive('public://mod_perfecto');
    drupal_set_message(t('All compositions have been deleted.'));
    drupal_goto($_GET['destination']);
  }
}


/**
 * Menu callback; Takes care of deletion for compositions one by one.
 */
function perfecto_unmanaged_delete_page_callback() {
  // Throw an error if the request is in the wrong directory.
  if (!strpos($_GET['file'], 'public://mod_perfecto/') === 0) {
    drupal_set_message(t("Sorry, you can't delete that composition."), 'error');
    $error = TRUE;
  }

  // Throw an error if the file does not exist.
  if (!file_exists($_GET['file'])) {
    drupal_set_message(t('Sorry, that composition does not exist.'), 'error');
    $error = TRUE;
  }

  // All is good, go ahead and delete the file.
  if (!isset($error)) {
    drupal_unlink($_GET['file']);
    $file_name = end(explode('/', $_GET['file']));
    drupal_set_message(t('%file has been deleted.', array('%file' => $file_name)));
  }

  drupal_goto($_GET['destination']);
}

/**
 * Menu callback; Disables perfecto.
 */
function perfecto_disable_module_page_callback() {
  $pre_install_list = module_list();

  module_disable(array('perfecto'), FALSE);

  // Gets module list after install process, flushes caches and displays a
  // message if there are changes.
  $post_install_list = module_list(TRUE);
  if ($pre_install_list != $post_install_list) {
    drupal_flush_all_caches();
    // Clear our message (You have not uploaded any web compositions to ...)
    drupal_get_messages();
    drupal_set_message(t('The configuration options have been saved.'));
  }

  drupal_goto('admin/modules');
}
